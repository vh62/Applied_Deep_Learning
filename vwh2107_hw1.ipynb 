{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "a1.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-PZihj-d_tEt",
        "colab_type": "text"
      },
      "source": [
        "**Assignment 1**\n",
        "\n",
        "## About\n",
        "In this assignment, you will gain experience implementing a linear model, a neural network, and a deep neural network using TensorFlow 2.0. \n",
        "\n",
        "* You will use two different development styles. I thought it’d be helpful for you to see both of these early (if you’re familiar with them, you can branch out to any major framework that exist today). \n",
        "\n",
        "* Along the way, you'll add code to visualize the weights of a linear model, and provide your own implementation of softmax (so you learn to extend the built-in functionality right off the bat).\n",
        "\n",
        "This assignment has several parts, plan ahead and get started early (and come to office hours if you’re stuck, the TAs and I are happy to help). Most concepts will be covered in lecture two, just posting it early.\n",
        "\n",
        "## Instructions\n",
        "\n",
        "Complete the code in this notebook by searching for the text **\"TODO\"**.\n",
        "\n",
        "## Submission instructions\n",
        "\n",
        "Please submit this assignment on CourseWorks by uploading a Jupyter notebook that includes saved output. If you are working in Colab, you can prepare your notebook for submission by ensuring that runs end-to-end, then saving and downloading it:\n",
        "\n",
        "1. ```Runtime -> Restart and run all```\n",
        "1. ```File -> Save```\n",
        "1. ```File -> Download.ipynb```\n",
        "\n",
        "## Resources\n",
        "\n",
        "You can find all the latest tutorials for TensorFlow 2.0 [here](https://www.tensorflow.org/tutorials). Code examples that will help you with each part of the assignment are linked below.\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KZ5ssDBBl9n6",
        "colab_type": "text"
      },
      "source": [
        "## Setup"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MDj1_w6v-mYW",
        "colab_type": "text"
      },
      "source": [
        "### Install TensorFlow 2.0\n",
        "\n",
        "If you are running this notebook in Colab, the magic command below will install the most recent version. If you prefer working in Jupyter locally, you will need to install TensorFlow 2.0 on your system, using ```!pip install tensorflow==2.1.0```."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m1wARst_UkEi",
        "colab_type": "code",
        "outputId": "51cd3d40-467c-4d3b-dfe0-b32ce9de493c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "%tensorflow_version 2.x"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "TensorFlow 2.x selected.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QYSALG-y-_7b",
        "colab_type": "text"
      },
      "source": [
        "### Check which TF version is installed\n",
        "TensorFlow 2.0 is currently under development. It's good practice to check which version you have installed. All the code you'll write in this course will be for version 2.0 (currently in beta)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "21RQ0x71Ut_t",
        "colab_type": "code",
        "outputId": "a60ad8d7-a708-49f5-d2fa-d5819dd4252c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "import tensorflow as tf\n",
        "print(tf.__version__)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2.1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JQPA61YHUvht",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.layers import Dense, Flatten \n",
        "from tensorflow.keras import Model\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9vfWS0eYvzae",
        "colab_type": "text"
      },
      "source": [
        "## Part 1: First steps with Sequential models\n",
        "\n",
        "You will work with the Sequential API in this section. This is the easiest way to develop models with TF 2.0, and is the most common in practice. \n",
        "\n",
        "Here are a few code examples that will help you with this part of the assignment:\n",
        "\n",
        "* [Get started for beginners](https://www.tensorflow.org/tutorials/quickstart/beginner)\n",
        "* [Classify images](https://www.tensorflow.org/tutorials/keras/basic_classification)\n",
        "* [Explore overfitting and underfitting](https://www.tensorflow.org/tutorials/keras/overfit_and_underfit)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6X5681LTm0jC",
        "colab_type": "text"
      },
      "source": [
        "### Download and prepare a dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KHL51OKlmwyw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "mnist = tf.keras.datasets.mnist\n",
        "\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
        "x_train, x_test = x_train / 255.0, x_test / 255.0"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "daw-THC6m4u6",
        "colab_type": "text"
      },
      "source": [
        "### Define, train, and evaluate a linear model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MHWcSJEQm8jB",
        "colab_type": "code",
        "outputId": "84480d24-2be2-4954-911f-ceb043051264",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "source": [
        "model = tf.keras.models.Sequential([\n",
        "  tf.keras.layers.Flatten(input_shape=(28, 28)),\n",
        "  tf.keras.layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam',\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=5)\n",
        "model.evaluate(x_test, y_test)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 60000 samples\n",
            "Epoch 1/5\n",
            "60000/60000 [==============================] - 4s 75us/sample - loss: 0.4700 - accuracy: 0.8773\n",
            "Epoch 2/5\n",
            "60000/60000 [==============================] - 4s 68us/sample - loss: 0.3041 - accuracy: 0.9151\n",
            "Epoch 3/5\n",
            "60000/60000 [==============================] - 4s 67us/sample - loss: 0.2840 - accuracy: 0.9212\n",
            "Epoch 4/5\n",
            "60000/60000 [==============================] - 4s 70us/sample - loss: 0.2734 - accuracy: 0.9232\n",
            "Epoch 5/5\n",
            "60000/60000 [==============================] - 4s 68us/sample - loss: 0.2666 - accuracy: 0.9262\n",
            "10000/10000 [==============================] - 1s 71us/sample - loss: 0.2699 - accuracy: 0.9253\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.2698895300656557, 0.9253]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KyLE9HJbwRDp",
        "colab_type": "text"
      },
      "source": [
        "### 1a: Plot loss and accuracy\n",
        "\n",
        "**TODO**\n",
        "\n",
        "Modify the code below to produce plots showing loss and accuracy as a function of epochs on training and validation data (it's fine to use x_test and y_test as validation data for this assignment). To do so, you will need to add validation data to the call for ```model.fit```, and capture the results in a history object. Code for plotting is provided for you, you can pass your history object to this.\n",
        "\n",
        "![Plot 1](https://storage.googleapis.com/applied-dl/im/a1-1.png)\n",
        "![Plot 2](https://storage.googleapis.com/applied-dl/im/a1-2.png)\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xGFjRexynN11",
        "colab_type": "code",
        "outputId": "6dd1d411-d9e4-4e1e-c284-8a47d06def43",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 950
        }
      },
      "source": [
        "model = tf.keras.models.Sequential([\n",
        "  tf.keras.layers.Flatten(input_shape=(28, 28)),\n",
        "  tf.keras.layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam',\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "\n",
        "# 1. create a history object to store the results of model.fit\n",
        "# ```history = model.fit(...)```\n",
        "# 2. add another parameter to model.fit for validation data\n",
        "# https://keras.io/models/sequential/\n",
        "history = model.fit(x_train, y_train,validation_data=(x_test,y_test), epochs=10)\n",
        "\n",
        "# A plotting function you can reuse\n",
        "def plot(history):\n",
        "  \n",
        "  # The history object contains results on the training and test\n",
        "  # sets for each epoch\n",
        "  acc = history.history['accuracy']\n",
        "  val_acc = history.history['val_accuracy']\n",
        "  loss = history.history['loss']\n",
        "  val_loss = history.history['val_loss']\n",
        "\n",
        "  # Get the number of epochs\n",
        "  epochs = range(len(acc))\n",
        "\n",
        "  plt.title('Training and validation accuracy')\n",
        "  plt.plot(epochs, acc, color='blue', label='Train')\n",
        "  plt.plot(epochs, val_acc, color='orange', label='Val')\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.ylabel('Accuracy')\n",
        "  plt.legend()\n",
        "\n",
        "  _ = plt.figure()\n",
        "  plt.title('Training and validation loss')\n",
        "  plt.plot(epochs, loss, color='blue', label='Train')\n",
        "  plt.plot(epochs, val_loss, color='orange', label='Val')\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.ylabel('Loss')\n",
        "  plt.legend()\n",
        "  \n",
        "\n",
        "plot(history)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 60000 samples, validate on 10000 samples\n",
            "Epoch 1/10\n",
            "60000/60000 [==============================] - 5s 82us/sample - loss: 0.4699 - accuracy: 0.8766 - val_loss: 0.3094 - val_accuracy: 0.9130\n",
            "Epoch 2/10\n",
            "60000/60000 [==============================] - 5s 78us/sample - loss: 0.3036 - accuracy: 0.9152 - val_loss: 0.2872 - val_accuracy: 0.9213\n",
            "Epoch 3/10\n",
            "60000/60000 [==============================] - 5s 76us/sample - loss: 0.2836 - accuracy: 0.9199 - val_loss: 0.2757 - val_accuracy: 0.9239\n",
            "Epoch 4/10\n",
            "60000/60000 [==============================] - 5s 78us/sample - loss: 0.2728 - accuracy: 0.9234 - val_loss: 0.2697 - val_accuracy: 0.9261\n",
            "Epoch 5/10\n",
            "60000/60000 [==============================] - 5s 75us/sample - loss: 0.2662 - accuracy: 0.9261 - val_loss: 0.2682 - val_accuracy: 0.9271\n",
            "Epoch 6/10\n",
            "60000/60000 [==============================] - 5s 79us/sample - loss: 0.2619 - accuracy: 0.9266 - val_loss: 0.2651 - val_accuracy: 0.9272\n",
            "Epoch 7/10\n",
            "60000/60000 [==============================] - 5s 84us/sample - loss: 0.2580 - accuracy: 0.9280 - val_loss: 0.2697 - val_accuracy: 0.9261\n",
            "Epoch 8/10\n",
            "60000/60000 [==============================] - 5s 81us/sample - loss: 0.2554 - accuracy: 0.9290 - val_loss: 0.2649 - val_accuracy: 0.9272\n",
            "Epoch 9/10\n",
            "60000/60000 [==============================] - 5s 78us/sample - loss: 0.2529 - accuracy: 0.9308 - val_loss: 0.2696 - val_accuracy: 0.9263\n",
            "Epoch 10/10\n",
            "60000/60000 [==============================] - 4s 74us/sample - loss: 0.2512 - accuracy: 0.9305 - val_loss: 0.2663 - val_accuracy: 0.9269\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAEWCAYAAAB8LwAVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3deZhcVbnv8e+bTjrdmeeBdCYgIYSZ\ntCGQIEMYAiJRRCEKioAoF7gMoiKiIgdxOFwvekS8KBFBDhE5ohwRIkOwGhJJOgkBMoecDJ2JzjwP\nnX7vH2t3ulKp7lSSrt7V1b/P89RTe6z91k56v7XW2nstc3dERERStYg7ABERyU1KECIikpYShIiI\npKUEISIiaSlBiIhIWkoQIiKSlhKEZMzMCsxsq5n1a8ht42Rmx5pZg9/rbWYXmNmSpPn5ZnZ2Jtse\nxrF+a2b3Hu7+InVpGXcAkj1mtjVptg2wC9gbzX/V3Z85lM9z971Au4betjlw9+Ma4nPM7EbgGnc/\nN+mzb2yIzxZJpQSRx9x93wU6+oV6o7u/Vtf2ZtbS3asaIzaRg9H/x/ipiqkZM7MHzeyPZvasmW0B\nrjGzM83sX2a20cxWmdkvzKxVtH1LM3MzGxDN/yFa/7KZbTGzKWY28FC3jdZfYmYLzGyTmf2Hmb1t\nZtfVEXcmMX7VzBaZ2QYz+0XSvgVm9n/NbJ2ZLQbG1HN+vmNmE1KWPWpmP4umbzSzudH3+TD6dV/X\nZ1WY2bnRdBszezqKbTYwLGXb+8xscfS5s83s8mj5ScAvgbOj6ru1Sef2/qT9vxZ993Vm9hcz653J\nuTmU81wTj5m9ZmbrzWy1mX0z6Tjfjc7JZjMrN7Oj0lXnmdlbNf/O0flMRMdZD9xnZoPMbFJ0jLXR\neeuYtH//6DtWRut/bmZFUczHJ23X28y2m1nXur6vpOHuejWDF7AEuCBl2YPAbuCThB8LxcDHgDMI\npcujgQXArdH2LQEHBkTzfwDWAqVAK+CPwB8OY9sewBZgbLTuLmAPcF0d3yWTGP8KdAQGAOtrvjtw\nKzAbKAG6AonwZ5D2OEcDW4G2SZ/9EVAazX8y2saA84EdwMnRuguAJUmfVQGcG00/DLwJdAb6A3NS\ntv0c0Dv6N/l8FEPPaN2NwJspcf4BuD+aviiK8VSgCPgV8EYm5+YQz3NHYA1wO9Aa6AAMj9Z9G5gF\nDIq+w6lAF+DY1HMNvFXz7xx9tyrgZqCA8P9xMDAaKIz+n7wNPJz0fT6IzmfbaPuR0brHgR8mHefr\nwAtx/x02tVfsAejVSP/QdSeINw6y393An6LpdBf9XydteznwwWFsez1QlrTOgFXUkSAyjHFE0vo/\nA3dH0wlCVVvNuktTL1opn/0v4PPR9CXA/Hq2/RtwSzRdX4JYlvxvAfyv5G3TfO4HwCei6YMliN8D\nDyWt60Bodyo52Lk5xPN8LTCtju0+rIk3ZXkmCWLxQWK4sua4wNnAaqAgzXYjgf8BLJp/F7iiof+u\n8v2lKiZZnjxjZkPM7KWoymAz8ADQrZ79VydNb6f+hum6tj0qOQ4Pf9EVdX1IhjFmdCxgaT3xAvwn\nMC6a/nw0XxPHZWb2TlT9sZHw672+c1Wjd30xmNl1ZjYrqibZCAzJ8HMhfL99n+fum4ENQJ+kbTL6\nNzvIee5LSATp1LfuYFL/P/Yys+fMbEUUw5MpMSzxcEPEftz9bUJpZJSZnQj0A146zJiaLSUISb3F\n8/8RfrEe6+4dgO8RftFn0yrCL1wAzMzY/4KW6khiXEW4sNQ42G24zwEXmFkfQhXYf0YxFgPPAz8i\nVP90Av6RYRyr64rBzI4GHiNUs3SNPnde0uce7JbclYRqq5rPa0+oylqRQVyp6jvPy4Fj6tivrnXb\nopjaJC3rlbJN6vf7CeHuu5OiGK5LiaG/mRXUEcdTwDWE0s5z7r6rju2kDkoQkqo9sAnYFjXyfbUR\njvk34HQz+6SZtSTUa3fPUozPAXeYWZ+owfJb9W3s7qsJ1SBPEqqXFkarWhPqxSuBvWZ2GaGuPNMY\n7jWzThaeE7k1aV07wkWykpArv0IoQdRYA5QkNxaneBa4wcxONrPWhARW5u51lsjqUd95fhHoZ2a3\nmllrM+tgZsOjdb8FHjSzYyw41cy6EBLjasLNEAVmdhNJyayeGLYBm8ysL6Gaq8YUYB3wkIWG/2Iz\nG5m0/mlCldTnCclCDpEShKT6OvAlQqPx/yM0JmeVu68BrgJ+RviDPwaYSfjl2NAxPga8DrwPTCOU\nAg7mPwltCvuql9x9I3An8AKhofdKQqLLxPcJJZklwMskXbzc/T3gP4Cp0TbHAe8k7fsqsBBYY2bJ\nVUU1+79CqAp6Idq/H/CFDONKVed5dvdNwIXAZwhJawFwTrT634G/EM7zZkKDcVFUdfgV4F7CDQvH\npny3dL4PDCckqheB/0qKoQq4DDieUJpYRvh3qFm/hPDvvMvdJx/idxdqG3BEckZUZbASuNLdy+KO\nR5ouM3uK0PB9f9yxNEV6UE5ygpmNIdwxtINwm+Qewq9okcMSteeMBU6KO5amSlVMkitGAYsJde8X\nA59Wo6IcLjP7EeFZjIfcfVnc8TRVqmISEZG0VIIQEZG08qYNolu3bj5gwIC4wxARaVKmT5++1t3T\n3laeNwliwIABlJeXxx2GiEiTYmZ19iagKiYREUlLCUJERNJSghARkbTypg0inT179lBRUcHOnTvj\nDqXRFBUVUVJSQqtWdXXVIyKSmbxOEBUVFbRv354BAwYQOgjNb+7OunXrqKioYODAgQffQUSkHnld\nxbRz5066du3aLJIDgJnRtWvXZlViEpHsyesEATSb5FCjuX1fEcmevK5iEhFpaFVVMGcOlJfDsmVQ\nVATFxeGVPF3Xspr5Vq0g13/PZTVBRD10/pwwAPlv3f3HKev7A+MJg8OsB65x94po+QuEEk4r4D/c\n/dfZjDUb1q1bx+jRYQyZ1atXU1BQQPfu4YHFqVOnUlhYeNDP+PKXv8w999zDcccdl9VYReRAVVUw\nb15IBtOnh/d334WGqMVt0aL+BJJJkql59e4NF1105DGlylqCiPr0f5QwqEgFMM3MXnT3OUmbPQw8\n5e6/N7PzCaNfXUsY6ORMd99lZu2AD6J9V2Yr3mzo2rUr7777LgD3338/7dq14+67795vm32Dg7dI\nX9v3u9/9Lutxigjs3RuSQU0imD4dZs6EHTvC+nbt4PTT4eabobQUhg2DY46B3btDwtixI7ySpw91\nPnl63bq6t03tY3XEiCaWIAijQC1y98UAZjaB0Dd7coIYCtwVTU8ijEKFu+9O2qY1edZWsmjRIi6/\n/HJOO+00Zs6cyauvvsoPfvADZsyYwY4dO7jqqqv43ve+B8CoUaP45S9/yYknnki3bt342te+xssv\nv0ybNm3461//So8ePWL+NiJNz969sGDB/iWDmTNh+/awvm1bOO00+OpXQyIoLYXBg8Ov/lQtW0Kb\nNgcuzxb3A5NSHb8vj1g2E0QfwjCANSqAM1K2mQVcQaiG+jTQ3sy6uvu6aPzZlwjDEn4jXekhGtP2\nJoB+/eofe/6OO0LRsCGdeio88sjh7Ttv3jyeeuopSktLAfjxj39Mly5dqKqq4rzzzuPKK69k6NCh\n++2zadMmzjnnHH784x9z1113MX78eO65554j/Roiea26OiSD5JLBjBmwbVtY36ZNSAY33lhbMjju\nOCgoiDfuuphB69bh1bFjdo8VdyP13cAvzew6IAGsAPYCuPty4GQzOwr4i5k9H41dvI+7P04Y75bS\n0tImNbDFMcccsy85ADz77LM88cQTVFVVsXLlSubMmXNAgiguLuaSSy4BYNiwYZSVaTROkWTV1bBo\n0YHJYMuWsL6oKCSD66+vLRkMGZK7ySBu2UwQK4C+SfMl0bJ9olLBFQBRW8NnosHg99vGzD4Aziaz\nAebTOtxf+tnStm3bfdMLFy7k5z//OVOnTqVTp05cc801aZ9lSG7ULigooKqqqlFiFclF7vDhh/tX\nE82YAZs3h/VFRXDKKfDFL9Ymg+OPD1VCkplsnqppwCAzG0hIDFcDn0/ewMy6AevdvZowDvH4aHkJ\nsM7dd5hZZ8JwlP83i7HGavPmzbRv354OHTqwatUqJk6cyJgxY+IOSyRW7rBhA1RUwIoV4b1mevHi\nkAw2bQrbtm4dksEXvlBbTTR0aLiVVA5f1hKEu1eZ2a3ARMJtruPdfbaZPQCUu/uLwLnAj8zMCVVM\nt0S7Hw/8n2i5AQ+7+/vZijVup59+OkOHDmXIkCH079+fkSNHxh2SSFbt3Qtr1hx44U9NBqkFaTPo\n2RP69YNx42pLBiecoGSQDXkzJnVpaamnDhg0d+5cjj/++Jgiik9z/d6SG3btgpUr67/wr1oVkkSy\nVq2gTx8oKTnwvWa6d28lgoZmZtPdvTTdOtXGiUjGtmxJX+WTPF1ZeeB+bdtC377hIj969IEX/pIS\n6NYte7dryuFRghCR/ezcGRp/FyyAhQvDe81rzZoDt+/WrfYiP3z4gRf+Pn2gQ4fc71ZCDqQEIdIM\nVVXB0qUHJoCFC8Py5Jrnnj1h0CD4xCfCe79+tRf+o44KXT1IflKCEDlU7uB7k17V9c9TDdUp8zXT\n1SnzdX5eNbTuCm37Q/FR0OLgf7ruoa4/NQEsWBBKCHv21G7boUN4Uviss+C660IiGDw4vGf7YayM\neTXsWA3bl8GutdC6OxT3hqKeUNA67ujykhKENG97tsL2CtixYv/37RWwfQXsqIA9W1Iu+DGzFlDc\nJySLNv3YUdCfVZv78T9r+jFnSX/K5/XjvTntWbiw9mlhCLeCDhoUbv/81Kdqk8DgwdC9ew5UAVXt\nCBf/bcui96VhetvSML99OVTvSb9vYZeQLIp7Q1HvpOletdPFvaFV+8b9Ttni1bBnM+zeALs3hv8T\nnU9p8MMoQUh+codd6/a/4O+bji782yvCH1mq1l2huATa9IEuw6CwU/gDtILaFy2gRcp8zXSLlHkr\nOHD/Q5iv9gK2bTc+Wl7Jhoql7Fy7DNu+lGKW0aX1FPp0eo6jW1ZxdAGMPgY4BrZe0IlNVf3ZXdiP\nlh36065nPzoe1Y8W7UJSobhXOEaj/nusrb3YJ1/4axLBrpTWbWsRSktt+kHXM6DfZ/clRVp3C5+3\nY1V47Yzed6yGLYkwXb37wDhatk1KIL32TybJCaZ1l+yfn727ai/wuzfAno37z9e1bPdG2LMJSKoH\n7HoGXPyvBg9RCSLLzjvvPO655x4uvvjifcseeeQR5s+fz2OPPZZ2n3bt2rF169bGCrHpqa6CnavD\nhb6uC//2FVC9a//9rEX4RdmmBDoMgZ6jw3SbkvCLvE1JuCC1bJhK9erq8At+8+bwQNfmzQdOH2x+\n06babiKSlZTUlgCOG7yXk45dzaA+y+jTaSktdy2j3baltNu2DLYvhW0JWLIJliR9QItW0KZvuNi2\n7Q9t+9VefNv2C++Hch727g7nflvSBX/70qTSwDLYu2P/fQra1B67y7DaY9fE0aZPiPNwuIeL6b7k\nsfrAZLJhFuycmP5HQotWoeoqNYGklkhato8u4ikX8P0u7nUkgdTzkaqgGAo7R69O4f9oxxNq52vW\nteoUzlUWKEFk2bhx45gwYcJ+CWLChAn89Kc/jTGqHFe9FzZ9AJtmp//1v3NVKGIna1FYe6Hvegb0\nTbrot4lKA0W9Mqq7T7ZmDSxZcngX+S1bDuyWOZ127UIbQIcOob6/Q4faO39q5jt0CI3DgwfDsceG\n20ZrFRD6xuwDnJn+ILs3pa++2b4M1rwOO1YeeE5bd09JHP3DRXFn5YGlgB2r2O8XLYTz3bYfdDwJ\njrqsNvHUJIXCLtmr1zILpYDWXYAT6t+2alttAtlXElkVfoTsWAXblsDaKQeWcA4eRLiQt0q6mBf3\n3v8Cn7xuv2WdcqJdRQkiy6688kruu+8+du/eTWFhIUuWLGHlypWcdtppjB49mg0bNrBnzx4efPBB\nxo4dG3e48di7C9ZNg8q3oLIMKt+OitCRVh1qL/a9h0bVP9FFv01JmG/dtUEuNnv2wOTJ8Mor4VVf\nD8Bt2x54Ee/de//51PWp8+3bN1JHcYUdofAk6HRS+vXVe6ISWZrqn01zYeUrsHd77fYtWtde8Htf\nvH/po23/8O9SUNQIX6wBtGwL7Y8Jr/pU74Gda/ZPJnu2Rhf2NBf8Vu0btxovC5pPgph+B2xo4P6+\nO58Kw+rvBbBLly4MHz6cl19+mbFjxzJhwgQ+97nPUVxczAsvvECHDh1Yu3YtI0aM4PLLL28eY0rv\n3gRrJ4eE8FEZrJtaWx3UYQj0+xz0ODuqdigJCSKLli2rTQivvRZ++bdsGe7oeeih0MdP8kW9Y8fw\nqz+vOn1r0QraDQivdNxh9/pwYWzdHYq6N/mL3yFr0aq2RNpM5NN/8ZxVU81UkyCeeOIJ3J17772X\nRCJBixYtWLFiBWvWrKFXr15xh9vwdqwKiaCyLCSFje+F6gwrgM6nw+BboPvZ0H1kuPBk2c6dUFZW\nmxTmRENY9e0b+vcZMwbOPz+Hbu/MBWahlNa6a9yRSCNqPgniIL/0s2ns2LHceeedzJgxg+3btzNs\n2DCefPJJKisrmT59Oq1atWLAgAFpu/huctxhy8KQDD6KEsLWD8O6gjbQ7Uw44buhhNBtRCjeN4JF\ni2oTwqRJYeSwwkI45xy44YaQFI4/Pgdu9RTJIc0nQcSoXbt2nHfeeVx//fWMGzcOCKPD9ejRg1at\nWjFp0iSWLl0ac5SHqboKNs7av4Sw86OwrnU36D4KBt0cSghdTjv8u1IO0bZt8OabISG8/HJ4MAxC\nA+/114eEcO65qY29IpJMCaKRjBs3jk9/+tNMmDABgC984Qt88pOf5KSTTqK0tJQhQ4bEHGGGqnbA\nundqE8LaKVAV3ZLbdgD0uhh6jAoJocOQRvtJ7g5z59YmhEQijNtbXByqi+64IySFY49tlHBE8oIS\nRCP51Kc+RXLX6t26dWPKlClpt82pZyB2rQ93FdVUGW2YHj3NatDpRBj4xVBK6HF2ozfebd4Mr78e\nEsIrr8DyaAT0oUPh1lvhkktg1KgwspiIHDolCNnfjtWw5o3aEsKm2WF5i1bQ5WMw5K6oQfmscCtf\nI3KHWbNqSwmTJ4dO59q3hwsugPvuC6WEfv0aNSyRvKUE0dzt3R2qiVa9El41twK3bB+SQP9x0S2n\nH2uwJ4wPxfr18OqrISFMnAirV4flp54K3/hGSAhnnqlBZESyIe8ThLs3j2cLIhmNELh1SZQQJsLq\n16FqC1jLkBBOeQh6XwSdTo36FGp8q1fD00/Dn/8MU6eGLiu6dIGLLgoJ4aKLwgNpIpJdeZ0gioqK\nWLduHV27dm0WScLdWbduHUWple5VO+Cjf9aWEjbPD8vb9ocBn4feY6DX+Vl/IK0+e/aEUsL48fC3\nv4XhKEtL4bvfDUnhYx9rpCeORWSfvE4QJSUlVFRUUJluDMQ8VVRUREmfPqF7hFWvhC4SPvpneFK5\noAh6nAvH3gxHjYH2g2O/8X/+/JAUnnoqlBx69oS77gq3ojaVG7tE8lVeJ4hWrVoxcODAuMNoHLs3\nhU7XVr4CsyaGfnQAOhwPg/5XSAjdz46lHSHV1q3w3HMhMbz9digZfOITISlceqnaE0RyRV4niLzm\n1bBhZkgIqyaGvo18b6gm6nUBnHhf1IlabtzS4w5TpsATT8Af/xgeZBs8GH7yE/jiFyEfexgRaeqU\nIJqSnR/BqldrG5hruh/uMgyGfiu0JXQb0WhPK2eipsF5/HiYNy88uXzVVaG0cNZZsddwiUg9lCBy\nWXUVrP1XbePy+ulheevu4U6j3mPCe1GPeONMUVUFf//7/g3OZ50VSg+f/Wx4bkFEcp8SRK7ZtiyU\nDlZNhNWvhXERrCB0cnfyg6EtofNpOdnVshqcRfKLEkSuWPsveOcrYSQ1CMNB9vtcSAg9R4cBX3LQ\n1q3wpz+F0oEanEXyixJELljxN3jrc2GIxtN/FqqOGrGju0NV0+A8fnxocN66VQ3OIvlICSJui34L\n074aBs4596Wca09ItmZNqD5Sg7NI85DVimwzG2Nm881skZndk2Z9fzN73czeM7M3zawkWn6qmU0x\ns9nRuquyGWcs3OH9B2DqV6DXRTB6Uk4mh6oqePFF+NSnoE8f+OY3Q7cXTzwBq1aF95EjlRxE8lHW\nShBmVgA8ClwIVADTzOxFd5+TtNnDwFPu/nszOx/4EXAtsB34orsvNLOjgOlmNtHdN2Yr3kZVXQXl\nt8Cix2Hgl+CM3+TUramgBmcRyW4V03BgkbsvBjCzCcBYIDlBDAXuiqYnAX8BcPcFNRu4+0oz+wjo\nDjT9BFG1Hd4eBytehBPuDXcm5cjP7+pq+Mtf4Gc/U4OziGS3iqkPsDxpviJalmwWcEU0/WmgvZnt\nNyq6mQ0HCoEPUw9gZjeZWbmZlTeJ/pZ2rYM3LoAV/w2lv4RTfpgTycE9VCMNGwaf+UwoMfzkJ1BR\nAX/9K4wdq+Qg0hzFfTP93cA5ZjYTOAdYAeytWWlmvYGngS+7e3Xqzu7+uLuXuntp9+7dGyvmw7Nt\nKbw6CtbPgFF/gsG3xB0R7vDSS6Gn1LFjYcuWUKU0b15oa9DdSCLNWzarmFYAfZPmS6Jl+7j7SqIS\nhJm1Az5T085gZh2Al4DvuPu/shhn9m2YBW9eErrdPv/VMABPjNzhH/+A730vjLcwYEBob7j2Wmip\n+9pEJJLNEsQ0YJCZDTSzQuBq4MXkDcysm9m+R4K/DYyPlhcCLxAasJ/PYozZt2YSvPbx8DT0hW/F\nmhzc4bXXwjjNY8aEqqTf/AYWLIAvf1nJQUT2l7UE4e5VwK3ARGAu8Jy7zzazB8zs8mizc4H5ZrYA\n6An8MFr+OeDjwHVm9m70OjVbsWbN0j/CpDHhqegLJ0OnE2IL5c034Zxz4MILYdkyeOwxWLgQbrxR\n7Qsikp5lNERlE1BaWurl5eVxh1Fr3iMw484wBsM5f4XCzrGEUVYG3/8+TJoUhum8996QFFIHnROR\n5snMprt7abp1cTdS5x+vhpnfCMmh7xVw/j9iSQ5TpoTSwsc/DnPmwCOPwIcfwq23KjmISGZU69yQ\n9u6Gd66HJc+EUdyG/QJaNO5AylOnhhLDK69A9+7w8MNw883Qpk2jhiEieUAJoqHs2QJlV4Quuk/5\nIQz9dqM+4zB9ekgML70EXbuG5xhuuSX0lyQicjiUIBrCjtXw5qWw8T0Y8Ts4+rpGO/S778L994cH\n2jp3hoceCtVIGpRHRI6UEsSR2rwg3Km0cw2c899w1CWNctj334cf/AD+67+gY0d44AG4/Xbo0KFR\nDi8izYASxJFY+w788zLA4II3oevHsn7IOXNCYnjuuZAMvv99uOMO6NQp64cWkWZGCeJwrXgpDPJT\n3AvOmwjtj83q4ebPD6WEZ58N7Qrf+U7oXbVLl6weVkSaMSWIw/HheJh6E3Q6Bc79OxT3zNqhFi0K\nieGZZ8Ltqd/6Fnz969CtW9YOKSICKEEcGneY/UN477thkJ+zn4dW2WkNXrwY/u3f4OmnobAwlBa+\n8Q3okXtjColInlKCyFT1Xii/FRb9GgZcC2f8FgoKG/wwS5bAD38ITz4Z+ka67bZQalDPqiLS2JQg\nMlG1AyZ/Hir+AkO/Baf8qMGfcdi9G+68M3SeZxYebrvnHjjqqAY9jIhIxpQgDmbXekhcDpWTw5PR\nx92WlcP8+c/wq1/BDTeE5xpKSrJyGBGRjClB1GfbsvCMw9YPYdQfod9ns3aoRCI83PbrX6vbbRHJ\nDboU1WXj+yE5VG0Lt7H2PDerhysrg5EjlRxEJHeoN9d01rwZhgcFuLAs68lh3Tr44AM4O96B5kRE\n9qMEkWrZn2DSxVDcBy6aAp1Oyvoh3347vH/841k/lIhIxpQgks3/Bbx1Vegy48K3oG2/RjlsIgGt\nW8PHst9Th4hIxpQgIBrk51sw/XYoGQvnvQqtG68Pi0QCzjgjJAkRkVyhBLF3N0z5Esz9KQy6GUY9\nDy2LG+3wW7fCjBlqfxCR3KMEsX05rHwJTn4QSh9t9BHgpkyBvXvV/iAiuUc3VbY/Bi6bD0XdYzl8\nWRm0aAFnnhnL4UVE6qQSBMSWHCC0P5x+ukaAE5HcowQRo1274J131P4gIrlJCSJG5eWwc6faH0Qk\nNylBxKisLLyPGhVvHCIi6ShBxCiRgKFDNTqciOQmJYiY7N0buthQ9ZKI5KqsJggzG2Nm881skZnd\nk2Z9fzN73czeM7M3zawkad0rZrbRzP6WzRjj8t57sHmzGqhFJHdlLUGYWQHwKHAJMBQYZ2ZDUzZ7\nGHjK3U8GHgB+lLTu34FrsxVf3BKJ8K4EISK5KpsliOHAIndf7O67gQnA2JRthgJvRNOTkte7++vA\nlizGF6uyMhgwAPr2jTsSEZH0spkg+gDLk+YromXJZgFXRNOfBtqbWddMD2BmN5lZuZmVV1ZWHlGw\njck9lCDU/iAiuSzuRuq7gXPMbCZwDrAC2Jvpzu7+uLuXuntp9+7xPQ19qBYsgMpKVS+JSG7LZl9M\nK4DkCpSSaNk+7r6SqARhZu2Az7j7xizGlBNq2h9UghCRXHbQEoSZ3WZmnQ/js6cBg8xsoJkVAlcD\nL6Z8djczq4nh28D4wzhOk1NWBj16wKBBcUciIlK3TKqYegLTzOy56LZVy+SD3b0KuBWYCMwFnnP3\n2Wb2gJldHm12LjDfzBZEx/lhzf5mVgb8CRhtZhVmdnHG3yrH1bQ/ZHYmRUTiYe5+8I1CUrgI+DJQ\nCjwHPOHuH2Y3vMyVlpZ6eXl53GEc1LJl0L8//OIXcNttcUcjIs2dmU1399J06zJqpPaQRVZHryqg\nM/C8mf20waJsJmr6X1IDtYjkuoM2UpvZ7cAXgbXAb4FvuPueqO1gIfDN7IaYXxIJ6NgRTjop7khE\nROqXyV1MXYAr3H1p8kJ3rzazy7ITVv4qK4ORI6GgcUc2FRE5ZJlUMb0MrK+ZMbMOZnYGgLvPzVZg\n+aiyEubO1e2tItI0ZJIgHgO2Js1vjZbJIXrrrfCu9gcRaQoySRDmSbc6uXs12X3ALm8lElBUBKVp\n7xcQEcktmSSIxWb2v82sVZ4kINsAABECSURBVPS6HVic7cDyUVkZjBgBhYVxRyIicnCZJIivAWcR\nusmoAM4AbspmUPlo82aYOVPtDyLSdBy0qsjdPyJ0kyFHYPJkqK5W+4OINB2ZPAdRBNwAnAAU1Sx3\n9+uzGFfeKSuDli3hzDPjjkREJDOZVDE9DfQCLgb+SeiVNW8H8smWRAKGDYO2beOOREQkM5kkiGPd\n/bvANnf/PfAJQjuEZGjnTpg6VdVLItK0ZJIg9kTvG83sRKAj0CN7IeWfqVNh9241UItI05LJ8wyP\nR+NB3EcYz6Ed8N2sRpVnajroGzky3jhERA5FvQki6pBvs7tvABLA0Y0SVZ5JJELnfF26xB2JiEjm\n6q1iip6aVm+tR6CqKtziqvYHEWlqMmmDeM3M7jazvmbWpeaV9cjyxLvvwtatan8QkaYnkzaIq6L3\nW5KWOapuykgiEd5VghCRpiaTJ6kHNkYg+aqsDI45Bo46Ku5IREQOTSZPUn8x3XJ3f6rhw8kv1dUh\nQVx+edyRiIgcukyqmD6WNF0EjAZmAEoQBzFvHqxbp+olEWmaMqliui153sw6AROyFlEeqWl/UAO1\niDRFmdzFlGoboHaJDJSVQe/ecLSa80WkCcqkDeK/CXctQUgoQ4HnshlUPnAPJYiPfxzM4o5GROTQ\nZdIG8XDSdBWw1N0rshRP3li6FCoq1P4gIk1XJgliGbDK3XcCmFmxmQ1w9yVZjayJU/uDiDR1mbRB\n/AmoTprfGy2TeiQS0LkznHBC3JGIiByeTBJES3ffXTMTTRdm8uFmNsbM5pvZIjO7J836/mb2upm9\nZ2ZvmllJ0rovmdnC6PWlTI6XS8rKYNQoaHE4twGIiOSATC5flWa271EvMxsLrD3YTmZWADwKXEJo\n2B5nZkNTNnsYeMrdTwYeAH4U7dsF+D5hYKLhwPejLsebhNWrYcECtT+ISNOWSYL4GnCvmS0zs2XA\nt4CvZrDfcGCRuy+OSh0TgLEp2wwF3oimJyWtvxh41d3XR12NvwqMyeCYOeGtt8K72h9EpCnL5EG5\nD4ERZtYumt+a4Wf3AZYnzVdw4FCls4ArgJ8Dnwbam1nXOvbtk+FxY5dIQJs2cPrpcUciInL4DlqC\nMLOHzKyTu291961m1tnMHmyg498NnGNmM4FzgBWERvCMmNlNZlZuZuWVlZUNFNKRKyuDM8+EVq3i\njkRE5PBlUsV0ibtvrJmJqnwuzWC/FUDfpPmSaNk+7r7S3a9w99OA70TLNmayb7Tt4+5e6u6l3bt3\nzyCk7Nu4EWbNUvWSiDR9mSSIAjNrXTNjZsVA63q2rzENGGRmA82sELiaMKb1PmbWLRrWFODbwPho\neiJwUVRa6QxcFC3LeZMnh6eo1UAtIk1dJg/KPQO8bma/Awy4Dvj9wXZy9yozu5VwYS8Axrv7bDN7\nACh39xeBc4EfmZkTxry+Jdp3vZn9GyHJADzg7usP6ZvFJJEIVUtnpLa2iIg0MebuB9/IbAxwAaFP\nps1AL3e/pf69GldpaamXl5fHHQZnnRXeJ0+ONw4RkUyY2XR3L023LtPHuNYQksNngfOBuQ0UW17Z\nvh3Ky9X+ICL5oc4qJjMbDIyLXmuBPxJKHOc1UmxNzjvvwJ49an8QkfxQXxvEPKAMuMzdFwGY2Z2N\nElUTVVYWuvYeOTLuSEREjlx9VUxXAKuASWb2GzMbTWikljokEnDyydCpU9yRiIgcuToThLv/xd2v\nBoYQusG4A+hhZo+Z2UWNFWBTsWcPTJmi9gcRyR8HbaR2923u/p/u/knCA2szCf0xSZIZM0IjtRKE\niOSLQ+qM2t03RE8vj85WQE1VWVl4VwO1iOQLjVbQQBIJGDwYevaMOxIRkYahBNEAqqtDF98qPYhI\nPlGCaACzZ8OGDWp/EJH8ogTRABKJ8K4ShIjkEyWIBlBWBiUlMGBA3JGIiDQcJYgj5B5KEGefHZ6i\nFhHJF0oQR2jxYli1Su0PIpJ/lCCOkNofRCRfKUEcobIy6NoVjj8+7khERBqWEsQRqml/aKEzKSJ5\nRpe1I7ByJXz4oaqXRCQ/KUEcgZr+l9RALSL5SAniCCQS0K4dnHpq3JGIiDQ8JYgjUFYGZ50FLesb\nl09EpIlSgjhM69fD+++r/UFE8pcSxGF6++3wrvYHEclXShCHKZGAwkIYPjzuSEREskMJ4jCVlYXk\nUFQUdyQiItmhBHEYtm6F6dPV/iAi+U0J4jD8619QVaX2BxHJb0oQh6GsLHStcdZZcUciIpI9WU0Q\nZjbGzOab2SIzuyfN+n5mNsnMZprZe2Z2abS80Mx+Z2bvm9ksMzs3m3EeqkQiPBzXoUPckYiIZE/W\nEoSZFQCPApcAQ4FxZjY0ZbP7gOfc/TTgauBX0fKvALj7ScCFwP8xs5wo7ezeHaqYVL0kIvkumxfd\n4cAid1/s7ruBCcDYlG0cqPkd3hFYGU0PBd4AcPePgI1AaRZjzVh5OezcqQZqEcl/2UwQfYDlSfMV\n0bJk9wPXmFkF8Hfgtmj5LOByM2tpZgOBYUDf1AOY2U1mVm5m5ZWVlQ0df1o1HfQpQYhIvou72mYc\n8KS7lwCXAk9HVUnjCQmlHHgEmAzsTd3Z3R9391J3L+3evXujBJxIwJAh0EiHExGJTTa7mVvB/r/6\nS6JlyW4AxgC4+xQzKwK6RdVKd9ZsZGaTgQVZjDUje/fCW2/B1VfHHYmISPZlswQxDRhkZgPNrJDQ\nCP1iyjbLgNEAZnY8UARUmlkbM2sbLb8QqHL3OVmMNSPvvw+bN6t6SUSah6yVINy9ysxuBSYCBcB4\nd59tZg8A5e7+IvB14Ddmdiehwfo6d3cz6wFMNLNqQqnj2mzFeSgSifCuO5hEpDnI6kgG7v53QuNz\n8rLvJU3PAUam2W8JcFw2YzscZWXQr194iYjku7gbqZsM91CCUOlBRJoLJYgMLVwIH32kBCEizYcS\nRIZq2h/UQC0izYUSRIbKysKzD8flXMuIiEh2KEFkKJEIpQezuCMREWkcShAZWL4clixR+4OINC9K\nEBlQ/0si0hwpQWQgkYD27eGUU+KORESk8ShBZKCsDEaOhIKCuCMREWk8ShAHsXYtzJmj9gcRaX6U\nIA7irbfCuxKEiDQ3ShAHkUhA69ZQmhPj2YmINB4liIMoK4MRI0KSEBFpTpQg6rFlC8yYodtbRaR5\nUoKox+TJUF2t9gcRaZ6UIOpRVhZubT3zzLgjERFpfEoQ9Ugk4PTToV27uCMREWl8ShB12LkTpk5V\n+4OINF9KEHWYNg127VL7g4g0X0oQdajpoG/UqHjjEBGJixJEHRIJOOEE6No17khEROKhBJFGVVW4\nxVXVSyLSnClBpDFrVnhITg3UItKcKUGkkUiEdyUIEWnOlCDSKCuDgQOhpCTuSERE4qMEkcI9JAi1\nP4hIc6cEkWLevDBIkKqXRKS5y2qCMLMxZjbfzBaZ2T1p1vczs0lmNtPM3jOzS6Plrczs92b2vpnN\nNbNvZzPOZDXtDypBiEhzl7UEYWYFwKPAJcBQYJyZDU3Z7D7gOXc/Dbga+FW0/LNAa3c/CRgGfNXM\nBmQr1mRlZdCzJxx7bGMcTUQkd2WzBDEcWOTui919NzABGJuyjQMdoumOwMqk5W3NrCVQDOwGNmcx\n1n0SiVB6MGuMo4mI5K5sJog+wPKk+YpoWbL7gWvMrAL4O3BbtPx5YBuwClgGPOzu67MYKwBLl8Ly\n5Wp/EBGB+BupxwFPunsJcCnwtJm1IJQ+9gJHAQOBr5vZ0ak7m9lNZlZuZuWVlZVHHIzaH0REamUz\nQawA+ibNl0TLkt0APAfg7lOAIqAb8HngFXff4+4fAW8DpakHcPfH3b3U3Uu7d+9+xAEnEtCpE5x4\n4hF/lIhIk5fNBDENGGRmA82skNAI/WLKNsuA0QBmdjwhQVRGy8+PlrcFRgDzshgrEBqoR44Mo8iJ\niDR3WUsQ7l4F3ApMBOYS7laabWYPmNnl0WZfB75iZrOAZ4Hr3N0Jdz+1M7PZhETzO3d/L1uxAqxZ\nA/Pnq3pJRKRGy2x+uLv/ndD4nLzse0nTc4CRafbbSrjVtdG89VZ4VwO1iEgQdyN1zkgkoLgYhg2L\nOxIRkdygBBEpK4MRI6CwMO5IRERygxIEsGkTvPuu2h9ERJIpQRBGj3NX+4OISDIlCEL7Q8uWoYpJ\nREQCJQhCghg2DNq2jTsSEZHc0ewTxI4dMG2a2h9ERFI1+wSxaRN89rMwZkzckYiI5JasPijXFPTq\nBc88E3cUIiK5p9mXIEREJD0lCBERSUsJQkRE0lKCEBGRtJQgREQkLSUIERFJSwlCRETSUoIQEZG0\nLIzw2fSZWSWw9Ag+ohuwtoHCaep0Lvan87E/nY9a+XAu+rt793Qr8iZBHCkzK3f30rjjyAU6F/vT\n+difzketfD8XqmISEZG0lCBERCQtJYhaj8cdQA7Rudifzsf+dD5q5fW5UBuEiIikpRKEiIikpQQh\nIiJpNfsEYWZjzGy+mS0ys3vijidOZtbXzCaZ2Rwzm21mt8cdU9zMrMDMZprZ3+KOJW5m1snMnjez\neWY218zOjDumOJnZndHfyQdm9qyZFcUdU0Nr1gnCzAqAR4FLgKHAODMbGm9UsaoCvu7uQ4ERwC3N\n/HwA3A7MjTuIHPFz4BV3HwKcQjM+L2bWB/jfQKm7nwgUAFfHG1XDa9YJAhgOLHL3xe6+G5gAjI05\npti4+yp3nxFNbyFcAPrEG1V8zKwE+ATw27hjiZuZdQQ+DjwB4O673X1jvFHFriVQbGYtgTbAypjj\naXDNPUH0AZYnzVfQjC+IycxsAHAa8E68kcTqEeCbQHXcgeSAgUAl8Luoyu23ZtY27qDi4u4rgIeB\nZcAqYJO7/yPeqBpec08QkoaZtQP+C7jD3TfHHU8czOwy4CN3nx53LDmiJXA68Ji7nwZsA5ptm52Z\ndSbUNgwEjgLamtk18UbV8Jp7glgB9E2aL4mWNVtm1oqQHJ5x9z/HHU+MRgKXm9kSQtXj+Wb2h3hD\nilUFUOHuNSXK5wkJo7m6APgfd6909z3An4GzYo6pwTX3BDENGGRmA82skNDI9GLMMcXGzIxQxzzX\n3X8Wdzxxcvdvu3uJuw8g/L94w93z7hdiptx9NbDczI6LFo0G5sQYUtyWASPMrE30dzOaPGy0bxl3\nAHFy9yozuxWYSLgLYby7z445rDiNBK4F3jezd6Nl97r732OMSXLHbcAz0Y+pxcCXY44nNu7+jpk9\nD8wg3P03kzzsdkNdbYiISFrNvYpJRETqoAQhIiJpKUGIiEhaShAiIpKWEoSIiKSlBCFyCMxsr5m9\nm/RqsKeJzWyAmX3QUJ8ncqSa9XMQIodhh7ufGncQIo1BJQiRBmBmS8zsp2b2vplNNbNjo+UDzOwN\nM3vPzF43s37R8p5m9oKZzYpeNd00FJjZb6JxBv5hZsWxfSlp9pQgRA5NcUoV01VJ6za5+0nALwk9\nwQL8B/B7dz8ZeAb4RbT8F8A/3f0UQp9GNU/wDwIedfcTgI3AZ7L8fUTqpCepRQ6BmW1193Zpli8B\nznf3xVGHh6vdvauZrQV6u/ueaPkqd+9mZpVAibvvSvqMAcCr7j4omv8W0MrdH8z+NxM5kEoQIg3H\n65g+FLuSpveidkKJkRKESMO5Kul9SjQ9mdqhKL8AlEXTrwM3w75xrzs2VpAimdKvE5FDU5zU0y2E\nMZprbnXtbGbvEUoB46JltxFGYfsGYUS2mh5QbwceN7MbCCWFmwkjk4nkDLVBiDSAqA2i1N3Xxh2L\nSENRFZOIiKSlEoSIiKSlEoSIiKSlBCEiImkpQYiISFpKECIikpYShIiIpPX/AeOzlMi4aED2AAAA\nAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAEWCAYAAAB8LwAVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3de3xU9Z3/8deHBBISCMhNhYDhplwV\nMKKMtl5KrVqF7tafldV9tLau1Ufd2ur2V9fa369r21239WftxV5ct7rWKuvabUVFbbdqW1sFg+IF\nEEVEDCCEuxDI9fP743tCJmESJslMTpJ5Px+PecycM2fO+cxA5j3f7/dczN0RERFprV/cBYiISM+k\ngBARkZQUECIikpICQkREUlJAiIhISgoIERFJSQEh3cLM8sxsn5mNy+SycTKzSWaW8f3EzWy+mW1I\nml5rZh9KZ9lObOtuM7ups69vZ73fMrN7M71e6V75cRcgPZOZ7UuaLAJqgIZo+vPu/suOrM/dG4BB\nmV42F7j7CZlYj5ldCVzu7mclrfvKTKxb+iYFhKTk7oe+oKNfqFe6+/+0tbyZ5bt7fXfUJiLdQ11M\n0ilRF8J/mtmDZvYBcLmZzTOzF8xst5ltMbMfmFn/aPl8M3MzK4um74+ef8LMPjCz581sfEeXjZ4/\n38zeNLM9ZvZDM/uzmX2mjbrTqfHzZrbOzHaZ2Q+SXptnZt8zsx1mth44r53P52tmtrjVvDvN7Pbo\n8ZVmtiZ6P29Hv+7bWlelmZ0VPS4ys19Eta0CTm617M1mtj5a7yozWxDNnwn8CPhQ1H23Pemz/UbS\n66+O3vsOM/uNmR2bzmdzJGb2V1E9u83saTM7Iem5m8xss5ntNbM3kt7raWb2UjR/q5l9N93tSYa4\nu266tXsDNgDzW837FlALXET4oTEQOAU4ldAynQC8CVwbLZ8POFAWTd8PbAfKgf7AfwL3d2LZUcAH\nwMLoueuBOuAzbbyXdGp8BBgClAE7m947cC2wCigFhgN/DH9CKbczAdgHFCetextQHk1fFC1jwDnA\nAeDE6Ln5wIakdVUCZ0WPbwOeBY4CjgNWt1r2EuDY6N/kb6Iajo6euxJ4tlWd9wPfiB6fG9U4CygE\nfgw8nc5nk+L9fwu4N3o8NarjnOjf6CZgbfR4OvAucEy07HhgQvT4RWBR9HgwcGrcfwu5dlMLQrri\n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\nKSBERCSl/w/KrWNm9V7qQwAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4EhrKNT8wfgD",
        "colab_type": "text"
      },
      "source": [
        "### 1b: Implement a neural network \n",
        "\n",
        "**TODO**\n",
        "\n",
        "Modify the code below to create a neural network (with a single hidden layer). Add a Dense layer with 128 units and ReLU activation. Train and evaluate your model. How does the accuracy compare with the linear model above? It is not necessary to produce plots for this section."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FYUgpSwPq-HF",
        "colab_type": "code",
        "outputId": "9bd9cdc2-e70c-4c3c-8303-7c8ebc4029c6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "model = tf.keras.models.Sequential([\n",
        "  tf.keras.layers.Flatten(input_shape=(28, 28)),\n",
        "  # Modify me\n",
        "  tf.keras.layers.Dense(128,activation=tf.nn.relu),\n",
        "  tf.keras.layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam',\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=5)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 60000 samples\n",
            "Epoch 1/5\n",
            "60000/60000 [==============================] - 4s 73us/sample - loss: 0.2611 - accuracy: 0.9251\n",
            "Epoch 2/5\n",
            "60000/60000 [==============================] - 4s 70us/sample - loss: 0.1151 - accuracy: 0.9663\n",
            "Epoch 3/5\n",
            "60000/60000 [==============================] - 4s 72us/sample - loss: 0.0777 - accuracy: 0.9766\n",
            "Epoch 4/5\n",
            "60000/60000 [==============================] - 4s 69us/sample - loss: 0.0593 - accuracy: 0.9820\n",
            "Epoch 5/5\n",
            "60000/60000 [==============================] - 4s 67us/sample - loss: 0.0446 - accuracy: 0.9861\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f9390156588>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dEBxFU8YPsmZ",
        "colab_type": "text"
      },
      "source": [
        "The accuracy is higher than the linear model above. This is because adding more layers increases the model complexity and thus the accuracy to a certain extent, afterwhich we might start overfitting the data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V18pDvPzwh6l",
        "colab_type": "text"
      },
      "source": [
        "### 1c: Implement a deep neural network \n",
        "\n",
        "**TODO**\n",
        "\n",
        "Modify the code below to create and train a deep neural network with at least two hidden layers."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K0odgGhmrNNh",
        "colab_type": "code",
        "outputId": "89f2e45e-ff84-4c63-e556-ec1ba65d390b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "model = tf.keras.models.Sequential([\n",
        "  tf.keras.layers.Flatten(input_shape=(28, 28)),\n",
        "  # Modify me\n",
        "  tf.keras.layers.Dense(128,activation=tf.nn.relu),\n",
        "  tf.keras.layers.Dense(128,activation=tf.nn.relu),\n",
        "  tf.keras.layers.Dense(128,activation=tf.nn.relu),\n",
        "  tf.keras.layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam',\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=5)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 60000 samples\n",
            "Epoch 1/5\n",
            "60000/60000 [==============================] - 5s 79us/sample - loss: 0.2277 - accuracy: 0.9317\n",
            "Epoch 2/5\n",
            "60000/60000 [==============================] - 5s 75us/sample - loss: 0.0998 - accuracy: 0.9695\n",
            "Epoch 3/5\n",
            "60000/60000 [==============================] - 5s 77us/sample - loss: 0.0735 - accuracy: 0.9770\n",
            "Epoch 4/5\n",
            "60000/60000 [==============================] - 5s 76us/sample - loss: 0.0584 - accuracy: 0.9811\n",
            "Epoch 5/5\n",
            "60000/60000 [==============================] - 5s 78us/sample - loss: 0.0474 - accuracy: 0.9848\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f939005b8d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NkmnVGG-wnyw",
        "colab_type": "text"
      },
      "source": [
        "### 1d: Display predictions and their confidence \n",
        "\n",
        "**TODO**\n",
        "\n",
        "1. Choose one of your models above. Use it to make predictions on the entire test set using ```model.predict```\n",
        "\n",
        "2. Next, identify one image from the testing set the model classifies correctly, and another that it classifies incorrectly. Add code to display these images below, the correct labels, the predicted labels, and the confidence scores."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BPd5NvaV1XEx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# TODO: add your code here.\n",
        "import numpy as np\n",
        "predictions = model.predict(x_test)\n",
        "predicted_label = np.argmax(predictions, axis =1)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R2jphB7J4Qlc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "5507d5e8-c74a-471e-b03a-186005b10df6"
      },
      "source": [
        "y_test[8]"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B9wTEFOh1bU_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "491aa532-35ea-459d-813f-d9fb65bbb7d5"
      },
      "source": [
        "predicted_label"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([7, 2, 1, ..., 4, 5, 6])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oLYt_iw3NoAZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "aaab394f-c206-404b-ccbe-d4da56790732"
      },
      "source": [
        "misclassified = [ind for ind, val in enumerate(y_test != predicted_label) if val == True]\n",
        "misclassified[0]"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R1eOcy_mIGiz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# CODE TO PLOT IS TAKEN FROM THE TENSORFLOW WEBSITE https://www.tensorflow.org/tutorials/keras/classification\n",
        "def plot_image(i, predictions_array, true_label, img):\n",
        "  predictions_array, true_label, img = predictions_array, true_label[i], img[i]\n",
        "  plt.grid(False)\n",
        "  plt.xticks([])\n",
        "  plt.yticks([])\n",
        "\n",
        "  plt.imshow(img, cmap=plt.cm.binary)\n",
        "  predicted_label = np.argmax(predictions_array)\n",
        "  \n",
        "def plot_value_array(i, predictions_array, true_label):\n",
        "  predictions_array, true_label = predictions_array, true_label[i]\n",
        "  plt.grid(False)\n",
        "  plt.xticks(range(10))\n",
        "  plt.yticks([])\n",
        "  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n",
        "  plt.ylim([0, 1])\n",
        "  predicted_label = np.argmax(predictions_array)  \n",
        "\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yUgPU-TYOk0G",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "cca20fbe-b5ba-42b1-9609-090ef1294a16"
      },
      "source": [
        "misclassified = [ind for ind, val in enumerate(y_test != predicted_label) if val == True]\n",
        "classified = [ind for ind, val in enumerate(y_test != predicted_label) if val == False]\n",
        "print(misclassified[0], classified[0])"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "8 0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SbuCmfJOIM5L",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 292
        },
        "outputId": "1832111f-79c8-4dfb-a432-b436b709cb34"
      },
      "source": [
        "#incorrectly classified\n",
        "confidences = [(i, predictions[i][np.argmax(predictions[i])]) for i in misclassified]\n",
        "# getting the highest confidence score amongst the misclassified images\n",
        "confidences = sorted(confidences,  key= lambda x: x[1], reverse=True)\n",
        "\n",
        "i = confidences[0][0]\n",
        "confidence = confidences[0][1]\n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1)\n",
        "plot_image(i, predictions[i], y_test, x_test)\n",
        "plt.subplot(1,2,2)\n",
        "plot_value_array(i, predictions[i],  y_test)\n",
        "#probablity predicted for the digit\n",
        "#confidence = predictions[i][np.argmax(predictions[i])]\n",
        "plt.xlabel(\"confidence score {:.5f}\".format(confidence))\n",
        "plt.title('predicted label')\n",
        "plt.show()\n",
        "print('correct label :', y_test[i])\n",
        "print('predict label :', predicted_label[i])\n",
        "print('confidence score {:.5f}'.format(confidence))"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n0IaToQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "correct label : 6\n",
            "predict label : 4\n",
            "confidence score 0.99975\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DeheyYu-tn05",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 292
        },
        "outputId": "7a00d1da-c0bb-4ca4-a512-31e7ec6d718b"
      },
      "source": [
        "#correct classified\n",
        "#i = classified[0]\n",
        "#confidence = predictions[i][np.argmax(predictions[i])]\n",
        "confidences = [(i, predictions[i][np.argmax(predictions[i])]) for i in classified]\n",
        "# getting the lowest confidence score amongst correctly classified images\n",
        "confidences = sorted(confidences,  key= lambda x: x[1])\n",
        "\n",
        "#print(confidences[0])\n",
        "i = confidences[0][0]\n",
        "confidence = confidences[0][1]              \n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1)\n",
        "plot_image(i, predictions[i], y_test, x_test)\n",
        "plt.subplot(1,2,2)\n",
        "plt.title('predicted label')\n",
        "plot_value_array(i, predictions[i],  y_test)\n",
        "#probablity predicted for the digit\n",
        "\n",
        "plt.xlabel(\"confidence score {:.2f}%\".format(confidence))\n",
        "plt.show()\n",
        "\n",
        "print('correct label :', y_test[i])\n",
        "print('predict label :', predicted_label[i])\n",
        "print('confidence score {:.5f}'.format(confidence))"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n/6RfJgxwNMX3AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "correct label : 9\n",
            "predict label : 9\n",
            "confidence score 0.27473\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ca0nFGJdv3H2",
        "colab_type": "text"
      },
      "source": [
        "## Part 2: Subclassed models\n",
        "\n",
        "In this part of the assignment, you'll work with the Keras Subclassing API. Instead of using a built-in method (```model.fit```) you will train models using a GradientTape.\n",
        "\n",
        "Here are a few code examples that will help you with this part of the assignment:\n",
        "\n",
        "* [Get started for experts](https://www.tensorflow.org/tutorials/quickstart/advanced)\n",
        "* [Tensors and operations](https://www.tensorflow.org/tutorials/eager/basics)\n",
        "* [Keras overview](https://www.tensorflow.org/guide/keras/overview)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xB6r75B5teHv",
        "colab_type": "text"
      },
      "source": [
        "### Download and prepare a dataset\n",
        "This is similar to the above, except now we'll use ```tf.data``` to batch and shuffle the data, instead of the utilities baked into ```model.fit```. It's not necessary for this assignment, but if you wish, you can learn how to use tf.data [here](https://www.tensorflow.org/beta/tutorials/load_data/images)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kYbkeJJqtm0h",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Download a dataset\n",
        "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n",
        "\n",
        "# Batch and shuffle the data\n",
        "train_ds = tf.data.Dataset.from_tensor_slices(\n",
        "    (x_train.astype('float32') / 255, y_train)).shuffle(1024).batch(32)\n",
        "\n",
        "test_ds = tf.data.Dataset.from_tensor_slices(\n",
        "    (x_test.astype('float32') / 255, y_test)).batch(32)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_JlSs-3qvCgi",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "c5ac924e-dc17-4c7f-d8d2-2ba3dd282e9a"
      },
      "source": [
        "# A quick example of iterating over a dataset object\n",
        "for image, label in train_ds.take(1):\n",
        "  plt.imshow(image[0], plt.get_cmap('gray'))\n",
        "  print(label[0])"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tf.Tensor(9, shape=(), dtype=uint8)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAANrUlEQVR4nO3db6hc9Z3H8c9ntRFME0mUjTdptN1y\nRRph7RLCwobFRVrcPIlV0ERYsxC9FeOSQB+suGLVKBTZNuRBjKRRmyzdhGIbDVq6zYaIK4RiErJ6\nozbJSqS55M9WH+QGhK7muw/uiVzjnd/czMyZmZvv+wWXmTnfOXO+TubjOTO/mfNzRAjApe/Pet0A\ngO4g7EAShB1IgrADSRB2IInLu7kx23z0D9QsIjzR8rb27LZvs/1720dtP9zOYwGol1sdZ7d9maTD\nkr4j6biktyQtj4h3C+uwZwdqVseefZGkoxHxQUT8SdJ2SUvbeDwANWon7PMk/WHc7ePVsi+wPWR7\nn+19bWwLQJtq/4AuIjZJ2iRxGA/0Ujt79hFJ88fd/lq1DEAfaifsb0katP0N29MkLZO0szNtAei0\nlg/jI+JT2w9J+g9Jl0l6ISIOdawzAB3V8tBbSxvjPTtQu1q+VANg6iDsQBKEHUiCsANJEHYgCcIO\nJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnC\nDiRB2IEkCDuQBGEHkiDsQBKEHUiCsANJEHYgCcIOJNHy/OySZPuYpFFJn0n6NCIWdqIpAJ3XVtgr\nfxcRf+zA4wCoEYfxQBLthj0k/db2fttDE93B9pDtfbb3tbktAG1wRLS+sj0vIkZs/7mkXZL+KSLe\nKNy/9Y0BmJSI8ETL29qzR8RIdXla0g5Ji9p5PAD1aTnstqfbnnH+uqTvShruVGMAOqudT+PnSNph\n+/zj/HtE/KYjXaFjLr+8/E88MDBQrC9btqxYf/TRR4v1mTNnNqydO3euuG4zBw4cKNafeOKJhrVX\nX321rW1PRS2HPSI+kPSXHewFQI0YegOSIOxAEoQdSIKwA0kQdiCJtr5Bd9Eb4xt0tZg7d27D2tDQ\nhN9i/lyzobN2VUOzE6r7tffJJ580rN17773FdXfs2NHpdrqmlm/QAZg6CDuQBGEHkiDsQBKEHUiC\nsANJEHYgCcbZp4Bbb721WF+3bl3D2oIFC4rr1v3v38tx9tK2R0dHi+suXry4WB8e7t9TNzDODiRH\n2IEkCDuQBGEHkiDsQBKEHUiCsANJdGJiR7Tp/vvvL9bXr19frE+bNq2T7XzBtm3bivWTJ08W6816\nb8fevXuL9SNHjjSs7d+/v7hus3H4qYg9O5AEYQeSIOxAEoQdSIKwA0kQdiAJwg4kwTh7FzzwwAPF\n+oYNG2rb9pkzZ4r1ZuPoa9euLdZPnDhx0T1NVrPflB89erRYf/311xvWnnzyyVZamtKa7tltv2D7\ntO3hcctm295l+0h1OaveNgG0azKH8T+TdNsFyx6WtDsiBiXtrm4D6GNNwx4Rb0j6+ILFSyVtqa5v\nkXR7h/sC0GGtvmefExHn36ydlDSn0R1tD0kqTzgGoHZtf0AXEVE6kWREbJK0SeKEk0AvtTr0dsr2\ngCRVl6c71xKAOrQa9p2SVlTXV0h6pTPtAKhL0/PG294m6RZJ10g6JemHkl6W9AtJ10n6UNJdEXHh\nh3gTPdYleRjf7Pfozz33XLHe7vnTS2Pdzc45f/jw4ba23Y4bbrihWH/zzTeL9dmzZxfrIyMjDWvX\nX399cd2prNF545u+Z4+I5Q1K5VcRgL7C12WBJAg7kARhB5Ig7EAShB1Igp+4TtL8+fMb1p5++ula\nt338+PFi/bHHHmtY6+XQmlT+mWqzn/Y2G1rDxWHPDiRB2IEkCDuQBGEHkiDsQBKEHUiCsANJMM4+\nSZs3b25Yq3s8+Nlnny3Wt27dWuv2SzZu3Fis33PPPQ1r06dP73Q7KGDPDiRB2IEkCDuQBGEHkiDs\nQBKEHUiCsANJMM5eueKKK4r1q6++umHNnvDMvZOuN/td9zPPPFOsz507t2Ft5syZxXWbnQZ72bJl\nxfq1115brJf+29s9hXYzTz31VK2PP9WwZweSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJJpO2dzRjfXx\nlM2lcXSpPH3w4OBgcd1m4+wfffRRsb5nz55ifcmSJQ1rV155ZXHduv/96xxnL01VLZXP9X8pazRl\nc9M9u+0XbJ+2PTxu2eO2R2wfrP4av9oA9IXJHMb/TNJtEyxfFxE3V3+/7mxbADqtadgj4g1JH3eh\nFwA1aucDuodsv10d5s9qdCfbQ7b32d7XxrYAtKnVsG+U9E1JN0s6IenHje4YEZsiYmFELGxxWwA6\noKWwR8SpiPgsIs5J+qmkRZ1tC0CntRR22wPjbn5P0nCj+wLoD01/z257m6RbJF1j+7ikH0q6xfbN\nkkLSMUnfr7HHrmg21v3SSy81rK1Zs6a4brOx7mbnnb/zzjuL9ay2b9/e6xamlKZhj4jlEyx+voZe\nANSIr8sCSRB2IAnCDiRB2IEkCDuQBD9x7YCBgYFi/aqrrirWV65c2cl2vmD9+vW1PbYk7d27t1gv\nnea63dfeTTfdVKy///77bT3+VNXyT1wBXBoIO5AEYQeSIOxAEoQdSIKwA0kQdiAJxtlRtHjx4mL9\ntddeK9ZnzJjRsNbstffiiy8W6/fdd1+xnhXj7EByhB1IgrADSRB2IAnCDiRB2IEkCDuQRNOzy+LS\nVhoHl6QNGzYU69OnTy/WS2PpzcbZN2/eXKzj4rBnB5Ig7EAShB1IgrADSRB2IAnCDiRB2IEkGGdP\n7o477ijWFyxYUNu2h4eHi/VDhw7Vtu2Mmu7Zbc+3vcf2u7YP2V5dLZ9te5ftI9XlrPrbBdCqyRzG\nfyrpBxHxLUl/LWmV7W9JeljS7ogYlLS7ug2gTzUNe0SciIgD1fVRSe9JmidpqaQt1d22SLq9riYB\ntO+i3rPb/rqkb0v6naQ5EXGiKp2UNKfBOkOShlpvEUAnTPrTeNtflfRLSWsi4sz4Woz9omHCXzVE\nxKaIWBgRC9vqFEBbJhV221/RWNB/HhG/qhafsj1Q1Qckna6nRQCd0PQw3rYlPS/pvYj4ybjSTkkr\nJP2ounyllg7RlmY/YV29enWt2z979mzD2qpVq4rrjo6Odrqd1Cbznv1vJP2DpHdsH6yWPaKxkP/C\n9kpJH0q6q54WAXRC07BHxJuSJjzpvKRbO9sOgLrwdVkgCcIOJEHYgSQIO5AEYQeSYMrmS9yNN95Y\nrNf9M9KRkZGGteuuu67WbWfFlM1AcoQdSIKwA0kQdiAJwg4kQdiBJAg7kASnkr4EzJ07t2Ht5Zdf\nLq5b9/csuvk9DpSxZweSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJBhnvwTcfffdDWuDg4PFdeseB1+7\ndm2tj4/JY88OJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0lMZn72+ZK2SpojKSRtioj1th+XdL+k/63u\n+khE/LquRtHYgQMHerbtBx98sFjfvHlzlzpBM5P5Us2nkn4QEQdsz5C03/auqrYuIv61vvYAdMpk\n5mc/IelEdX3U9nuS5tXdGIDOuqj37La/Lunbkn5XLXrI9tu2X7A9q8E6Q7b32d7XVqcA2jLpsNv+\nqqRfSloTEWckbZT0TUk3a2zP/+OJ1ouITRGxMCIWdqBfAC2aVNhtf0VjQf95RPxKkiLiVER8FhHn\nJP1U0qL62gTQrqZht21Jz0t6LyJ+Mm75wLi7fU/ScOfbA9ApTadstr1Y0n9JekfSuWrxI5KWa+wQ\nPiQdk/T96sO80mNxXmGgZo2mbGZ+duASw/zsQHKEHUiCsANJEHYgCcIOJEHYgSQIO5AEYQeSIOxA\nEoQdSIKwA0kQdiAJwg4kQdiBJLo9ZfMfJX047vY11bJ+1K+99WtfEr21qpO9Xd+o0NXfs39p4/a+\nfj03Xb/21q99SfTWqm71xmE8kARhB5Loddg39Xj7Jf3aW7/2JdFbq7rSW0/fswPonl7v2QF0CWEH\nkuhJ2G3fZvv3to/afrgXPTRi+5jtd2wf7PX8dNUceqdtD49bNtv2LttHqssJ59jrUW+P2x6pnruD\ntpf0qLf5tvfYftf2Idurq+U9fe4KfXXleev6e3bbl0k6LOk7ko5LekvS8oh4t6uNNGD7mKSFEdHz\nL2DY/ltJZyVtjYibqmXPSPo4In5U/Y9yVkT8c5/09riks72exruarWhg/DTjkm6X9I/q4XNX6Osu\ndeF568WefZGkoxHxQUT8SdJ2SUt70Effi4g3JH18weKlkrZU17do7MXSdQ166wsRcSIiDlTXRyWd\nn2a8p89doa+u6EXY50n6w7jbx9Vf872HpN/a3m97qNfNTGDOuGm2Tkqa08tmJtB0Gu9uumCa8b55\n7lqZ/rxdfED3ZYsj4q8k/b2kVdXhal+Ksfdg/TR2OqlpvLtlgmnGP9fL567V6c/b1Yuwj0iaP+72\n16plfSEiRqrL05J2qP+moj51fgbd6vJ0j/v5XD9N4z3RNOPqg+eul9Of9yLsb0katP0N29MkLZO0\nswd9fInt6dUHJ7I9XdJ31X9TUe+UtKK6vkLSKz3s5Qv6ZRrvRtOMq8fPXc+nP4+Irv9JWqKxT+T/\nR9K/9KKHBn39haT/rv4O9bo3Sds0dlj3fxr7bGOlpKsl7ZZ0RNJ/SprdR739m8am9n5bY8Ea6FFv\nizV2iP62pIPV35JeP3eFvrryvPF1WSAJPqADkiDsQBKEHUiCsANJEHYgCcIOJEHYgST+H9zYVzQD\nOeHjAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Nmw1h6stTg5",
        "colab_type": "text"
      },
      "source": [
        "### Define and train a linear model\n",
        "\n",
        "You may see some warnings running the below code (that's okay, just a matter of TF 2.0 being under active development)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BWGJoufMtbHA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class MyLinearModel(Model):\n",
        "  def __init__(self):\n",
        "    super(MyLinearModel, self).__init__()\n",
        "    self.flatten = Flatten()\n",
        "    self.d1 = Dense(10, activation='softmax', name=\"dense1\")\n",
        "\n",
        "  def call(self, x):\n",
        "    x = self.flatten(x)\n",
        "    return self.d1(x)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "35tIz37EttdP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "e2365151-0d6b-4230-c402-2071b9c82bdc"
      },
      "source": [
        "model = MyLinearModel()\n",
        "\n",
        "loss_fn = tf.keras.losses.SparseCategoricalCrossentropy()\n",
        "optimizer = tf.keras.optimizers.SGD()\n",
        "\n",
        "# For each epoch\n",
        "for epoch in range(5):\n",
        "\n",
        "  # For each batch of images and labels\n",
        "  for images, labels in train_ds:\n",
        "\n",
        "    # Open a GradientTape.\n",
        "    with tf.GradientTape() as tape:\n",
        "\n",
        "      # Forward pass\n",
        "      predictions = model(images)\n",
        "\n",
        "      # Calculate loss\n",
        "      loss = loss_fn(labels, predictions)\n",
        "\n",
        "    # Backprop to calculate gradients\n",
        "    gradients = tape.gradient(loss, model.trainable_variables)\n",
        "\n",
        "    # Gradient descent step\n",
        "    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n",
        "\n",
        "  # Calculate loss on the test data\n",
        "  test_loss = []\n",
        "  for images, labels in test_ds: \n",
        "    predictions = model(images)\n",
        "    loss_on_batch = loss_fn(labels, predictions)\n",
        "    test_loss.append(loss_on_batch)\n",
        "    \n",
        "  print(\"Epoch {}, Test loss: {}\".format(epoch, tf.reduce_mean(test_loss)))"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 0, Test loss: 0.48004433512687683\n",
            "Epoch 1, Test loss: 0.40008822083473206\n",
            "Epoch 2, Test loss: 0.3672493100166321\n",
            "Epoch 3, Test loss: 0.348488986492157\n",
            "Epoch 4, Test loss: 0.33591848611831665\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mEO51Mvi1jOT",
        "colab_type": "text"
      },
      "source": [
        "Note: you may have noticed that the above code runs slowly (it's executing eagerly). Later in this notebook, you will compile your code (to run it in graph mode) using ```@tf.function```. The general workflow is to write your code without using tf.function (as shown above, which makes for easier debugging). Once you've finished debugging your model, you can add ```@tf.function``` for performance if necessary."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dj7Y8JWgwv9Z",
        "colab_type": "text"
      },
      "source": [
        "### 2a: Challenge: Visualize the learned weights\n",
        "\n",
        "We can interpret a linear model by looking at the weights of the fully connected layer. Modify the below code to create a plot similar to the one on slide #50 of lecture 1:\n",
        "\n",
        "![Plot of weights](https://storage.googleapis.com/applied-dl/im/mnist-weights.png)\n",
        "\n",
        "**TODO**\n",
        "\n",
        "Modify the below code to retrieve the learned weights. You can use either the public API of a model ```model.get_layer(name)``` then retrieve the weights from that, or (because our model is defined using the Subclassing API), you can access the dense layer directly ```model.d1```."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JiQZV03RuWHM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "23722d84-0f8b-4daa-a0f9-a74000c72f5f"
      },
      "source": [
        "# There are two ways to retrieve the weights. You can use the public API\n",
        "# (model.get_layer(name).get_weights()), or, you can access the dense layer \n",
        "# directly (model.dl) then find the accessor method, or again, access the\n",
        "# variable directly.\n",
        "# Python tip: try ```dir(model.d1)```\n",
        "\n",
        "# Modify me\n",
        "weights, bias = model.get_layer('dense1').get_weights() # get the weights # get the weights\n",
        "print(weights.shape)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(784, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oz3VV2EiuY7X",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 161
        },
        "outputId": "3e044b0d-fd60-4b11-ce0b-d6d8e283f52f"
      },
      "source": [
        "fig, axs = plt.subplots(1,10, figsize=(20,20))\n",
        "for i in range(10):\n",
        "  subplot = axs[i]\n",
        "  subplot.set_title(i)\n",
        "  subplot.axis('off')\n",
        "  # Modify me\n",
        "  i_weights = weights[:,i] # Select the weights for the i'th output \n",
        "  img = i_weights.reshape(28,28) # Reshape the weights into a 28x28 array\n",
        "  subplot.imshow(img, plt.get_cmap('seismic'))\n",
        "plt.show()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 1440x1440 with 10 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HNBCIqzdw2GS",
        "colab_type": "text"
      },
      "source": [
        "### 2b: Implement a deep neural network\n",
        "\n",
        "**TODO**\n",
        "\n",
        "Modify this code to create a deep neural network. Train your model using the code below, and compare the accuracy to the linear model above. \n",
        "\n",
        "Note: you do not need to modify any sections other than the model definition. \n",
        "\n",
        "The code below uses compiled versions of the training and evaluation loops (remove the ```@tf.function``` annotations if you need to debug)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rxoIfq91xDRZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class MyDNN(Model):\n",
        "  def __init__(self):\n",
        "    super(MyDNN, self).__init__()\n",
        "    self.flatten = Flatten()\n",
        "    # Modify me\n",
        "    self.dense1 = tf.keras.layers.Dense(10, activation=tf.nn.relu)\n",
        "    self.dense2 = tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n",
        "    self.d1 = Dense(10, activation='softmax')\n",
        "\n",
        "  def call(self, x):\n",
        "    x = self.flatten(x)\n",
        "    x = self.dense1(x)\n",
        "    return self.dense2(x)\n",
        "\n",
        "model = MyDNN()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hVDDq2orxPBR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "loss_object = tf.keras.losses.SparseCategoricalCrossentropy()\n",
        "optimizer = tf.keras.optimizers.Adam()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WNC0K6JPxy-g",
        "colab_type": "text"
      },
      "source": [
        "These are helper functions we'll use to record loss and accuracy while your model is trained."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "duYKrACkxRHw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_loss = tf.keras.metrics.Mean(name='train_loss')\n",
        "train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')\n",
        "\n",
        "test_loss = tf.keras.metrics.Mean(name='test_loss')\n",
        "test_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='test_accuracy')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C_oUQki5x0lD",
        "colab_type": "text"
      },
      "source": [
        "This method trains the model on a batch of data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yTQAnrOAxUAu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "@tf.function\n",
        "def train_step(images, labels):\n",
        "  with tf.GradientTape() as tape:\n",
        "    predictions = model(images)\n",
        "    loss = loss_object(labels, predictions)\n",
        "  gradients = tape.gradient(loss, model.trainable_variables)\n",
        "  optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n",
        "\n",
        "  train_loss(loss)\n",
        "  train_accuracy(labels, predictions)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-lUJFkfux44o",
        "colab_type": "text"
      },
      "source": [
        "This method evaluates the model on a batch of data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BTMp9PwZxV5h",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "@tf.function\n",
        "def test_step(images, labels):\n",
        "  predictions = model(images)\n",
        "  t_loss = loss_object(labels, predictions)\n",
        "\n",
        "  test_loss(t_loss)\n",
        "  test_accuracy(labels, predictions)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AR0_bNd-x6OE",
        "colab_type": "text"
      },
      "source": [
        "Training and evaluation loop."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "enHqlaCfxXq3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "outputId": "f43c6e6a-af95-4187-bf2b-709bbc0543c8"
      },
      "source": [
        "EPOCHS = 5\n",
        "\n",
        "for epoch in range(EPOCHS):\n",
        "  for images, labels in train_ds:\n",
        "    train_step(images, labels)\n",
        "\n",
        "  for test_images, test_labels in test_ds:\n",
        "    test_step(test_images, test_labels)\n",
        "\n",
        "  template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}'\n",
        "  print(template.format(epoch+1,\n",
        "                        train_loss.result(),\n",
        "                        train_accuracy.result()*100,\n",
        "                        test_loss.result(),\n",
        "                        test_accuracy.result()*100))\n",
        "\n",
        "  # Reset the metrics for the next epoch\n",
        "  train_loss.reset_states()\n",
        "  train_accuracy.reset_states()\n",
        "  test_loss.reset_states()\n",
        "  test_accuracy.reset_states()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1, Loss: 0.5185474753379822, Accuracy: 85.08999633789062, Test Loss: 0.315154492855072, Test Accuracy: 90.81999969482422\n",
            "Epoch 2, Loss: 0.2934243381023407, Accuracy: 91.52667236328125, Test Loss: 0.271361768245697, Test Accuracy: 92.19999694824219\n",
            "Epoch 3, Loss: 0.2672025263309479, Accuracy: 92.37166595458984, Test Loss: 0.26406988501548767, Test Accuracy: 92.3699951171875\n",
            "Epoch 4, Loss: 0.25460317730903625, Accuracy: 92.79999542236328, Test Loss: 0.2598164677619934, Test Accuracy: 92.56999969482422\n",
            "Epoch 5, Loss: 0.2450847178697586, Accuracy: 92.99832916259766, Test Loss: 0.2500264048576355, Test Accuracy: 92.94000244140625\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZxjIFiyBPorB",
        "colab_type": "text"
      },
      "source": [
        "### 2c: Provide your own implementation of softmax and use it to train a model\n",
        "\n",
        "In your linear model above, the starter code looked similar to: \n",
        "\n",
        "\n",
        "```\n",
        "class LinearModel(Model):\n",
        "  def __init__(self):\n",
        "    super(LinearModel, self).__init__()\n",
        "    self.flatten = Flatten()\n",
        "    self.d1 = Dense(10, activation='softmax')\n",
        "\n",
        "  def call(self, x):\n",
        "    x = self.flatten(x)\n",
        "    return self.d1(x)\n",
        "``` \n",
        "\n",
        "Now, create a function:\n",
        "\n",
        "\n",
        "```\n",
        "def my_softmax(logits):\n",
        "  # ...\n",
        "```\n",
        "\n",
        "and use it in your model as follows:\n",
        "\n",
        "\n",
        "```\n",
        "class LinearModel(Model):\n",
        "  def __init__(self):\n",
        "    super(LinearModel, self).__init__()\n",
        "    self.flatten = Flatten()\n",
        "    self.d1 = Dense(10)\n",
        "\n",
        "  def call(self, x):\n",
        "    x = self.flatten(x)\n",
        "    x = self.d1(x)\n",
        "    return my_softmax(x)\n",
        "``` \n",
        "\n",
        "Notice, we've removed the built-in activation method on the Dense layer, and added our own to the call method.\n",
        "\n",
        "Tip: You can implement softmax first using NumPy, if you like, the gradually convert your code to use TensorFlow ops (which begin with tf.\\* instead of np.\\*).\n",
        "\n",
        "Notes: \n",
        "\n",
        "- Your softmax implementation should be numerically stable. \n",
        "- You will need to use tf.* ops in order to use your code to train a model (TF cannot backprop through NumPy operations)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SiLj-uFrRAn-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "outputId": "51fa3cb1-d6bf-45cd-af66-f251f2d1ecf1"
      },
      "source": [
        "# TODO: your code here\n",
        "\n",
        "def my_softmax(x):  \n",
        "  # Modify me\n",
        "  x_max = tf.reduce_max(x, axis=[1])\n",
        "  x_max = tf.expand_dims(x_max,axis=1)   \n",
        "  exponentials = tf.math.exp(x-x_max)\n",
        "  #the input x is a batch x 10 \n",
        "  #want to normalize for the dimension =1 -> \"10\"\n",
        "  sum_exponentials = tf.math.reduce_sum(x, axis=[1])\n",
        "  sum_exponentials = tf.expand_dims(sum_exponentials,axis=1) \n",
        "  #print(sum_exponentials.shape)\n",
        "  sum_exponentials = tf.repeat(sum_exponentials, repeats=x.shape[1], axis=1)\n",
        "  result = exponentials / sum_exponentials\n",
        "  return result\n",
        "\n",
        "class MyModel(Model):\n",
        "  def __init__(self):\n",
        "    super(MyModel, self).__init__()\n",
        "    self.flatten = Flatten()\n",
        "    self.d1 = Dense(10)\n",
        "\n",
        "  def call(self, x):\n",
        "    x = self.flatten(x)\n",
        "    x = self.d1(x)\n",
        "    return my_softmax(x)\n",
        "\n",
        "model = MyModel()\n",
        "model.compile(optimizer='adam',\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "# TODO\n",
        "# Add code to train you model, your accuracy should be similar \n",
        "# to the linear model\n",
        "model.fit(x_train, y_train, epochs=5, batch_size = None)\n",
        "model.evaluate(x_test, y_test)\n",
        "# TODO\n",
        "# Add code to train you model, your accuracy should be similar \n",
        "# to the linear model."
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 60000 samples\n",
            "Epoch 1/5\n",
            "60000/60000 [==============================] - 5s 80us/sample - loss: 3.7756 - accuracy: 0.4858\n",
            "Epoch 2/5\n",
            "60000/60000 [==============================] - 4s 71us/sample - loss: 1.6568 - accuracy: 0.7604\n",
            "Epoch 3/5\n",
            "60000/60000 [==============================] - 5s 75us/sample - loss: 1.5158 - accuracy: 0.7769\n",
            "Epoch 4/5\n",
            "60000/60000 [==============================] - 4s 72us/sample - loss: 1.2506 - accuracy: 0.8134\n",
            "Epoch 5/5\n",
            "60000/60000 [==============================] - 4s 74us/sample - loss: 1.0220 - accuracy: 0.8469\n",
            "10000/10000 [==============================] - 1s 74us/sample - loss: 0.8493 - accuracy: 0.8719\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.8493144006967545, 0.8719]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-nyUaOJ_HOQQ",
        "colab_type": "text"
      },
      "source": [
        "# End of Project"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tpMgC2sSHRX1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}